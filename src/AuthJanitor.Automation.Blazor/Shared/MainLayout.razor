@inherits LayoutComponentBase

<Layout Sider="true">
    <LayoutSider>
        <LayoutSiderContent>
            <Bar Breakpoint="Breakpoint.Desktop"
                 NavigationBreakpoint="Breakpoint.Tablet"
                 ThemeContrast="ThemeContrast.Dark"
                 Mode="BarMode.VerticalInline"
                 CollapseMode="BarCollapseMode.Small">
                <BarToggler />
                <BarBrand>
                    <BarItem>
                        <BarLink To="">
                            AuthJanitor
                        </BarLink>
                    </BarItem>
                </BarBrand>
                <BarMenu>
                    <BarStart>
                        <BarLabel>Manage</BarLabel>
                        <BarItem>
                            <BarLink To="">
                                <BarIcon IconName="IconName.Dashboard" />
                                Dashboard
                            </BarLink>
                        </BarItem>
                        <BarItem>
                            <BarLink To="resources">
                                <BarIcon IconName="IconName.Key" />
                                Resources
                            </BarLink>
                        </BarItem>
                        <BarItem>
                            <BarLink To="dependencygroups">
                                <BarIcon IconName="IconName.LayerGroup" />
                                Dependency Groups
                            </BarLink>
                        </BarItem>
                        <BarItem>
                            <BarLink To="rotations">
                                <BarIcon IconName="IconName.Redo" />
                                Rotations
                            </BarLink>
                        </BarItem>
                        <BarLabel>System</BarLabel>
                        <BarItem>
                            <BarLink To="system/providers">
                                <BarIcon IconName="IconName.Plug" />
                                Providers
                            </BarLink>
                        </BarItem>
                        <BarItem>
                            <BarLink To="system/integrity">
                                <BarIcon IconName="IconName.Link" />
                                Integrity
                            </BarLink>
                        </BarItem>
                    </BarStart>
                    <BarEnd>
                        <BarItem>
                            <BarLink To="https://github.com/microsoft/AuthJanitor">
                                <BarIcon IconName="IconName.Code" />
                                GitHub
                            </BarLink>
                        </BarItem>
                        <BarItem>
                            <BarLink To="https://github.com/microsoft/AuthJanitor/wiki">
                                <BarIcon IconName="IconName.Book" />
                                Docs
                            </BarLink>
                        </BarItem>
                    </BarEnd>
                </BarMenu>
            </Bar>
        </LayoutSiderContent>
    </LayoutSider>
    <Layout>
        <LayoutHeader Fixed="true">
            <Bar @bind-Visible="@topbarVisible" Breakpoint="Breakpoint.Desktop" Background="Background.Primary" ThemeContrast="ThemeContrast.Light">
                <BarBrand>
                    <BarItem>
                        <BarIcon IconName="IconName.Dashboard" />
                        Example Site
                    </BarItem>
                </BarBrand>
                <BarToggler />
                <BarMenu>
                    <BarEnd>
                        <BarItem>
                            <AuthorizeView>
                                <span class="mr-5">Welcome <b>@context.User.Identity.Name</b></span>
                            </AuthorizeView>
                        </BarItem>

                        <BarItem>
                            <BarDropdown>
                                <BarDropdownToggle><Icon Name="IconName.Tint" /> Theme</BarDropdownToggle>
                                <BarDropdownMenu Style="padding: 15px; min-width:550px;" RightAligned="true">
                                    <Row>
                                        <Column Margin="Margin.Is2.FromBottom">
                                            <Field>
                                                <Switch TValue="bool" Checked="@(Theme?.Enabled == true)" CheckedChanged="@OnThemeEnabledChanged">Theme enabled</Switch>
                                            </Field>
                                        </Column>
                                    </Row>
                                    <Row>
                                        <Column Margin="Margin.Is2.FromBottom">
                                            <Field>
                                                <Check TValue="bool" Checked="@(Theme?.IsGradient == true)" CheckedChanged="@OnGradientChanged">Gradient colors</Check>
                                            </Field>
                                            <Field>
                                                <Check TValue="bool" Checked="@(Theme?.IsRounded == true)" CheckedChanged="@OnRoundedChanged">Rounded elements</Check>
                                            </Field>
                                        </Column>
                                    </Row>
                                    <Row>
                                        <Column>
                                            <Container Fluid="true">
                                                <ThemeColorSelector Value="@(Theme?.ColorOptions?.Primary)" ValueChanged="@OnThemeColorChanged"></ThemeColorSelector>
                                            </Container>
                                        </Column>
                                    </Row>
                                </BarDropdownMenu>
                            </BarDropdown>
                        </BarItem>
                    </BarEnd>
                </BarMenu>
            </Bar>
        </LayoutHeader>
        <LayoutContent Padding="Padding.Is4.OnX">
            @Body
        </LayoutContent>
    </Layout>
</Layout>

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@code{
    public string UserDisplayName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // get a token
            var token = await TokenAcquisitionService.GetAccessTokenForUserAsync(
                new string[] { "https://graph.microsoft.com/User.Read" });

            var http = new HttpClient();
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var dataRequest = await http.GetAsync("https://graph.microsoft.com/beta/me");

            if (dataRequest.IsSuccessStatusCode)
            {
                var userData = System.Text.Json.JsonDocument.Parse(await dataRequest.Content.ReadAsStreamAsync());
                UserDisplayName = userData.RootElement.GetProperty("displayName").GetString();
            }
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }


    }

    void OnThemeEnabledChanged(bool value)
    {
        if (Theme == null)
            return;

        Theme.Enabled = value;

        Theme.ThemeHasChanged();
    }

    void OnGradientChanged(bool value)
    {
        if (Theme == null)
            return;

        Theme.IsGradient = value;

        //if ( Theme.GradientOptions == null )
        //    Theme.GradientOptions = new GradientOptions();

        //Theme.GradientOptions.BlendPercentage = 80;

        Theme.ThemeHasChanged();
    }

    void OnRoundedChanged(bool value)
    {
        if (Theme == null)
            return;

        Theme.IsRounded = value;

        Theme.ThemeHasChanged();
    }

    void OnThemeColorChanged(string value)
    {
        if (Theme == null)
            return;

        if (Theme.ColorOptions == null)
            Theme.ColorOptions = new ThemeColorOptions();

        if (Theme.BackgroundOptions == null)
            Theme.BackgroundOptions = new ThemeBackgroundOptions();

        if (Theme.TextColorOptions == null)
            Theme.TextColorOptions = new ThemeTextColorOptions();

        Theme.ColorOptions.Primary = value;
        Theme.BackgroundOptions.Primary = value;
        Theme.TextColorOptions.Primary = value;

        if (Theme.InputOptions == null)
            Theme.InputOptions = new ThemeInputOptions();

        //Theme.InputOptions.Color = value;
        Theme.InputOptions.CheckColor = value;
        Theme.InputOptions.SliderColor = value;

        Theme.ThemeHasChanged();
    }

    private bool topbarVisible = false;
    private bool uiElementsVisible = true;

    [CascadingParameter] protected Theme Theme { get; set; }
}